function Hardware.mod 3
push argument 1
pop local 0
push argument 1
push argument 1
add
pop local 1
push constant 0
not
pop local 2
label WHILE_EXP0
push argument 1
push argument 0
gt
not
not
if-goto WHILE_END0
push local 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push local 1
gt
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push local 0
sub
pop argument 0
push argument 1
push argument 1
add
pop local 0
push argument 1
pop local 1
goto IF_END1
label IF_FALSE1
push local 0
push constant 2
call Hardware.shl 2
pop local 0
push local 0
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 32767
pop local 0
label IF_FALSE2
label IF_END1
goto IF_END0
label IF_FALSE0
push argument 0
push local 0
gt
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push local 1
sub
pop argument 0
push argument 1
push argument 1
add
pop local 1
push argument 1
pop local 0
goto IF_END3
label IF_FALSE3
push local 1
push constant 2
call Hardware.shl 2
pop local 1
push local 1
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 32767
pop local 1
label IF_FALSE4
label IF_END3
label IF_END0
push local 2
not
pop local 2
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function Hardware.shl 1
push argument 0
pop local 0
label WHILE_EXP0
push argument 1
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push local 0
add
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Hardware.memcpy 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 2
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
push local 0
push argument 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Hardware.XOR 0
push argument 0
push argument 1
and
not
push argument 0
push argument 1
or
and
return
