function Rod.new 0
push constant 6
call Memory.alloc 1
pop pointer 0
push argument 2
pop this 5
push constant 0
pop this 4
push argument 0
pop this 1
push argument 1
pop this 2
push constant 1
pop this 0
push argument 1
call Array.new 1
pop this 3
push pointer 0
return
function Rod.isDiskAddable 2
push argument 0
pop pointer 0
push constant 0
pop local 1
push this 4
push constant 1
sub
push this 3
add
pop pointer 1
push that 0
pop local 0
push local 0
call Disk.getWidth 1
push argument 1
call Disk.getWidth 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
pop local 1
label IF_FALSE0
push local 1
return
function Rod.isDiskRemovable 1
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 4
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
pop local 0
label IF_FALSE0
push local 0
return
function Rod.pushDisk 0
push argument 0
pop pointer 0
push this 4
push this 3
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 4
push constant 1
add
pop this 4
push constant 0
return
function Rod.popDisk 0
push argument 0
pop pointer 0
push this 4
push constant 1
sub
pop this 4
push constant 0
return
function Rod.topDisk 0
push argument 0
pop pointer 0
push this 4
push constant 1
sub
push this 3
add
pop pointer 1
push that 0
return
function Rod.size 0
push argument 0
pop pointer 0
push this 4
return
function Rod.draw 3
push argument 0
pop pointer 0
push constant 250
push this 5
push constant 2
call Math.divide 2
sub
pop local 2
push constant 0
pop local 0
push this 1
push constant 1
sub
push constant 45
push this 1
push constant 1
sub
push constant 255
call Screen.drawLine 4
pop temp 0
push this 1
push constant 45
push this 1
push constant 255
call Screen.drawLine 4
pop temp 0
push this 1
push constant 1
add
push constant 45
push this 1
push constant 1
add
push constant 255
call Screen.drawLine 4
pop temp 0
label WHILE_EXP0
push local 0
push this 4
eq
not
not
if-goto WHILE_END0
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 1
push local 1
push this 1
push local 2
call Disk.draw 3
pop temp 0
push local 2
push this 5
sub
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Rod.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 4
eq
not
not
if-goto WHILE_END0
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 0
push local 0
call Disk.dispose 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
