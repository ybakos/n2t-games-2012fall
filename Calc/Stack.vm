function Stack.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 2
push argument 0
call Array.new 1
pop this 0
push constant 0
pop this 1
push pointer 0
return
function Stack.push 0
push argument 0
pop pointer 0
push this 1
push constant 1
add
push this 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 2
return
label IF_FALSE0
push this 1
push this 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 1
push constant 1
add
pop this 1
push constant 0
return
function Stack.drop 0
push argument 0
pop pointer 0
push this 1
push constant 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 3
return
label IF_FALSE0
push this 1
push constant 1
sub
pop this 1
push constant 0
return
function Stack.clear 0
push argument 0
pop pointer 0
push constant 0
pop this 1
push constant 0
return
function Stack.add 0
push argument 0
pop pointer 0
push this 1
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
pop this 1
push this 1
push constant 1
sub
push this 0
add
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push this 1
push this 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.sub 0
push argument 0
pop pointer 0
push this 1
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
pop this 1
push this 1
push constant 1
sub
push this 0
add
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push this 1
push this 0
add
pop pointer 1
push that 0
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.mult 0
push argument 0
pop pointer 0
push this 1
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
pop this 1
push this 1
push constant 1
sub
push this 0
add
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push this 1
push this 0
add
pop pointer 1
push that 0
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.div 0
push argument 0
pop pointer 0
push this 1
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 5
return
label IF_FALSE1
push this 1
push constant 1
sub
pop this 1
push this 1
push constant 1
sub
push this 0
add
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push this 1
push this 0
add
pop pointer 1
push that 0
call Math.divide 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.mod 0
push argument 0
pop pointer 0
push this 1
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 5
return
label IF_FALSE1
push this 1
push constant 1
sub
pop this 1
push this 1
push constant 1
sub
push this 0
add
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push this 1
push this 0
add
pop pointer 1
push that 0
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push this 1
push this 0
add
pop pointer 1
push that 0
call Math.divide 2
call Math.multiply 2
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.sqrt 0
push argument 0
pop pointer 0
push this 1
push constant 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 6
return
label IF_FALSE1
push this 1
push constant 1
sub
push this 0
add
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
call Math.sqrt 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.pow 3
push argument 0
pop pointer 0
push this 1
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
pop this 1
push this 1
push this 0
add
pop pointer 1
push that 0
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 1
push constant 1
sub
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE1
push this 1
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 1
push constant 1
sub
push this 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE2
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop local 0
push this 1
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 0
pop local 2
label WHILE_EXP0
push local 1
push constant 1
gt
not
if-goto WHILE_END0
push local 2
push local 0
call Math.multiply 2
pop local 2
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push this 1
push constant 1
sub
push this 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.swap 1
push argument 0
pop pointer 0
push this 1
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop local 0
push this 1
push constant 1
sub
push this 0
add
push this 1
push constant 2
sub
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 1
push constant 2
sub
push this 0
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Stack.dup 0
push argument 0
pop pointer 0
push this 1
push constant 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
return
label IF_FALSE0
push this 1
push this 0
add
push this 1
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 1
push constant 1
add
pop this 1
push constant 0
return
function Stack.displayStack 1
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 25
push constant 0
push constant 199
push constant 239
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 21
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call Stack.displayRow 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Stack.displayRow 3
push argument 0
pop pointer 0
push this 1
push constant 21
sub
push argument 1
add
pop local 2
push constant 0
pop local 1
push local 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
goto IF_END0
label IF_FALSE0
push local 2
push this 0
add
pop pointer 1
push that 0
pop local 0
push local 0
pop local 2
label IF_END0
push local 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
pop local 2
label IF_FALSE1
push local 0
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push constant 1
sub
pop local 1
push local 2
neg
pop local 2
label IF_FALSE2
push local 2
push constant 32767
lt
push local 2
push constant 32767
eq
or
push local 2
push constant 9999
gt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 1
push constant 1
sub
pop local 1
label IF_FALSE3
label WHILE_EXP0
push local 2
push constant 1000
lt
not
if-goto WHILE_END0
push local 1
push constant 1
add
pop local 1
push local 2
push constant 10
call Math.multiply 2
pop local 2
goto WHILE_EXP0
label WHILE_END0
push argument 1
push constant 6
push local 1
add
call Output.moveCursor 2
pop temp 0
push local 0
call Output.printInt 1
pop temp 0
push constant 0
return
